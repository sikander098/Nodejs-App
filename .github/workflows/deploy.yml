name: Deploy Node.js App

on:
  push:
    branches: [master]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

  build-push:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/node-app:latest

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > node-siku.pem
          chmod 400 node-siku.pem
          ssh -i node-siku.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            echo "🔹 Pulling the latest Docker image..."
            docker pull ${{ env.DOCKERHUB_USERNAME }}/node-app:latest

            echo "🔹 Stopping and removing any existing container..."
            docker stop my-nodejs-app || true  
            docker rm my-nodejs-app || true    

            echo "🔹 Running the new container..."
            docker run -d --name my-nodejs-app -p 80:3000 ${{ env.DOCKERHUB_USERNAME }}/node-app:latest

            echo "🔹 Waiting for the container to start..."
            sleep 5  # Wait a few seconds for the app to start

            echo "🔹 Checking container status..."
            if docker ps | grep my-nodejs-app; then
              echo "✅ Deployment successful! The container is running."
            else
              echo "❌ Deployment failed! The container is not running."
              exit 1  # Stop the pipeline if the container fails to start
            fi

            echo "🔹 Checking app health..."
            curl -f http://localhost:80 || (echo "❌ Health check failed! App is not responding." && exit 1)
          EOF

